---
description: UI Layout & Container Patterns — Enforces proper wrapper hierarchy, centering, and responsive width strategies
alwaysApply: false
---
# UI Layout Rules

⚠️ **ALWAYS READ FIRST:** `docs/UI-Architecture-Guide.md` — Complete reference for container/wrapper hierarchy patterns

---

## Core Layout Principles

### 1. Container Width Strategy

✅ **DO:**
```tsx
// Use w-full for containers (100% of parent, not viewport)
<section className="w-full h-[100vh]">

// Use max-w-[%] for responsive content blocks
<div className="w-full max-w-[90%] sm:max-w-[80%] lg:max-w-[70%] xl:max-w-[1100px]">

// Use Tailwind's container utility for standard sections
<div className="container mx-auto px-4 sm:px-6 lg:px-8">
```

❌ **DON'T:**
```tsx
// Never use viewport units for container widths
<section className="w-[100svw]">  // ❌ Causes overflow
<div className="w-[90vw]">        // ❌ Nested viewport units break

// Don't use fixed width percentages without max-w
<div className="w-[90%]">         // ❌ Can break flex centering
```

**Why:** Viewport units (`vw`/`svw`) can exceed document width due to scrollbars. Nested viewport units compound overflow issues. Use `w-full` (percentage of parent) instead.

---

### 2. Centering Strategies

✅ **DO:**
```tsx
// Flexbox centering (preferred)
<div className="flex items-center justify-center">
  <div>Centered content</div>
</div>

// Add padding to PARENT flex container
<div className="flex justify-center px-4">
  <div className="w-full max-w-[90%]">Content</div>
</div>

// Auto margins for block elements
<div className="mx-auto max-w-4xl">Centered block</div>
```

❌ **DON'T:**
```tsx
// Don't add margin to flex children (breaks centering)
<div className="flex justify-center">
  <div className="w-[90%] mx-4">Content</div>  // ❌ Shifts left
</div>
```

**Why:** Flex's `justify-center` calculates center based on child's total width including margins. This creates asymmetric centering.

---

### 3. Motion Wrapper Integration

✅ **DO:**
```tsx
// Pass className to Appear when it needs to participate in flex layout
<div className="flex justify-center">
  <Appear className="w-full flex justify-center">
    <div>Content</div>
  </Appear>
</div>

// Standard usage without layout participation
<div className="container mx-auto px-4">
  <Appear>
    <h2>Title</h2>
  </Appear>
</div>
```

❌ **DON'T:**
```tsx
// Don't wrap in Appear without flex participation for centered layouts
<div className="flex justify-center">
  <Appear>  // ❌ Creates block context, breaks centering
    <div>Content</div>
  </Appear>
</div>
```

**Why:** Framer Motion's `m.div` wrapper creates a block context that doesn't automatically participate in parent's flex layout. Must explicitly make it a flex container with `w-full flex justify-center`.

---

### 4. Full-Screen Backgrounds

✅ **DO:**
```tsx
// Use fixed positioning for full-screen backgrounds
<section className="relative w-full h-[100vh] overflow-hidden">
  <div className="fixed inset-0 -z-10 w-full h-full">
    <video className="absolute inset-0 w-full h-full object-cover" />
  </div>
  <div className="relative h-full w-full flex items-center justify-center">
    {/* Content */}
  </div>
</section>
```

❌ **DON'T:**
```tsx
// Don't use absolute for full-screen backgrounds
<section className="relative w-[100svw] h-[100svh]">
  <div className="absolute inset-0">  // ❌ Causes relayout
    <video className="h-full w-full" />
  </div>
</section>
```

**Why:** `fixed` positioning stays anchored to viewport, immune to URL bar changes and scroll. `absolute` can cause relayout on viewport changes. Consistent `100vh` prevents sub-pixel gaps.

---

### 5. Box Model Enforcement

✅ **GLOBAL REQUIREMENT:**
```css
/* In globals.css */
*,
*::before,
*::after {
  box-sizing: border-box;
}

html, body {
  overflow-x: hidden;
  width: 100%;
}
```

✅ **Component Level:**
```tsx
// Use box-border class when needed
<div className="w-full max-w-[90%] px-4 box-border">
```

**Why:** Ensures padding and borders are included in width calculations, preventing overflow.

---

## Standard Patterns

### Hero Section Pattern
```tsx
<section className="relative w-full h-[100vh] overflow-hidden">
  {/* Fixed background */}
  <div className="fixed inset-0 -z-10 w-full h-full">
    <video className="absolute inset-0 w-full h-full object-cover" />
  </div>
  
  {/* Content overlay */}
  <div className="relative h-full w-full flex items-center justify-center px-4">
    <Appear className="w-full flex justify-center">
      <div className="w-full max-w-[90%] sm:max-w-[80%] lg:max-w-[70%] xl:max-w-[1100px] text-center">
        {/* Content */}
      </div>
    </Appear>
  </div>
</section>
```

### Standard Content Section
```tsx
<section className="py-16 md:py-24 lg:py-32">
  <div className="container mx-auto px-4 sm:px-6 lg:px-8">
    <Appear>
      <h2>Section Title</h2>
      <p>Content</p>
    </Appear>
  </div>
</section>
```

### Grid Section with Stagger
```tsx
<section className="py-16 md:py-24">
  <div className="container mx-auto px-4 sm:px-6 lg:px-8">
    <Appear>
      <h2>Title</h2>
    </Appear>
    
    <AppearStack className="mt-12 grid gap-8 md:grid-cols-3">
      {items.map((item, i) => (
        <AppearItem key={i} index={i}>
          <Card {...item} />
        </AppearItem>
      ))}
    </AppearStack>
  </div>
</section>
```

---

## Responsive Width Breakpoints

Use these responsive patterns consistently:

```tsx
// Percentage-based with breakpoints
className="w-full max-w-[90%] sm:max-w-[80%] lg:max-w-[70%] xl:max-w-[1100px]"

// Tailwind max-width utilities
className="mx-auto max-w-sm"   // 384px
className="mx-auto max-w-md"   // 448px
className="mx-auto max-w-lg"   // 512px
className="mx-auto max-w-xl"   // 576px
className="mx-auto max-w-2xl"  // 672px
className="mx-auto max-w-4xl"  // 896px
className="mx-auto max-w-6xl"  // 1152px

// Container utility (matches breakpoints)
className="container mx-auto"  // Responsive max-width at each breakpoint
```

---

## Testing Requirements

Before considering UI changes complete:

1. ✅ Test at these widths: **320px, 375px, 414px, 530px, 768px, 1024px, 1280px, 1920px**
2. ✅ **530px is critical** — reveals most viewport unit + padding overflow issues
3. ✅ Mobile URL bar show/hide (scroll up/down in mobile view)
4. ✅ Desktop: hard refresh multiple times to check for gaps/shifts
5. ✅ Landscape orientation on mobile devices
6. ✅ Check centering at all widths (content should be perfectly centered)
7. ✅ No horizontal scroll at any width

---

## Common Issues & Solutions

### Issue: Content appears slightly left of center
**Cause:** Margin on flex child interferes with `justify-center`

**Fix:**
```tsx
// Move padding from child to parent
<div className="flex justify-center px-4">
  <div className="w-full max-w-[90%]">Content</div>
</div>
```

### Issue: White gutter on right side (~530px width)
**Cause:** Viewport units or nested viewport units causing overflow

**Fix:**
```tsx
// Replace viewport units with w-full and percentages
<section className="w-full">
  <div className="w-full max-w-[90%]">Content</div>
</section>
```

### Issue: Bottom gap after refresh
**Cause:** Inconsistent viewport units or absolute positioned background

**Fix:**
```tsx
// Use fixed positioning and consistent 100vh
<section className="h-[100vh]">
  <div className="fixed inset-0">Background</div>
</section>
```

### Issue: Appear wrapper breaks layout
**Cause:** Motion wrapper not participating in flex layout

**Fix:**
```tsx
// Add className to Appear to make it a flex container
<Appear className="w-full flex justify-center">
  <div>Content</div>
</Appear>
```

---

## Danger Patterns (Auto-Fail)

❌ Using `w-[100vw]` or `w-[100svw]` for section/container widths  
❌ Nesting viewport units (e.g., `w-[90vw]` inside `w-[100svw]`)  
❌ Adding `mx-*` or `px-*` to flex children when parent uses `justify-center`  
❌ Using `w-[X%]` instead of `max-w-[X%]` for responsive content blocks  
❌ Mixing `100svh` and `100vh` at different breakpoints  
❌ Using `absolute` instead of `fixed` for full-viewport backgrounds  
❌ Wrapping centered content in `<Appear>` without flex participation classes  
❌ Missing `box-sizing: border-box` when combining width + padding  

---

## Quick Decision Tree

**Need full-viewport background?**
→ Use `fixed inset-0 -z-10` for background layer  
→ Use `relative w-full h-[100vh]` for section  

**Need to center content?**
→ Use flex parent: `flex items-center justify-center`  
→ Add padding to parent, NOT child  
→ Use `max-w-[%]` on child, NOT `w-[%]`  

**Using Appear wrapper?**
→ If parent uses flex centering, add `className="w-full flex justify-center"` to Appear  
→ Otherwise, use without className  

**Need responsive width?**
→ Use `w-full max-w-[90%] sm:max-w-[80%] lg:max-w-[70%] xl:max-w-[1100px]`  
→ OR use `container mx-auto px-4 sm:px-6 lg:px-8`  
→ NEVER use viewport units (`vw`/`svw`)  

---

## Reference Files

- **Complete Guide:** `docs/UI-Architecture-Guide.md`
- **Viewport Fix Case Study:** `docs/Mobile-Viewport-Status.md`
- **Example Implementation:** `src/sections/Hero.tsx`
- **Global Styles:** `src/app/globals.css`
- **Motion Wrappers:** `src/components/motion/`

---

## When to Apply These Rules

1. ✅ Creating or modifying any section component
2. ✅ Adding full-screen backgrounds or overlays
3. ✅ Implementing centered layouts
4. ✅ Working with motion/animation wrappers
5. ✅ Debugging centering or overflow issues
6. ✅ Making responsive layout changes

---

**Last Updated:** October 2, 2025  
**Status:** Active — Enforce on all UI/layout changes
